name: Dependencies Pipeline

on:
  schedule:
    # Run weekly on Sundays at 6 AM UTC
    - cron: '0 6 * * 0'
  push:
    paths:
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Cache security audit results
      uses: actions/cache@v4
      with:
        path: .security-audit
        key: security-audit-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          security-audit-${{ runner.os }}-

    - name: Install dependencies
      run: npm ci --only=production

    - name: Run npm audit
      run: npm audit --audit-level=moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Cache audit results
      run: |
        mkdir -p .security-audit
        npm audit --json > .security-audit/audit-report.json
        echo "Last audit: $(date -u +'%Y-%m-%d %H:%M UTC')" > .security-audit/last-audit.txt

  dependency-check:
    name: Dependency Health Check
    runs-on: ubuntu-latest
    needs: security-audit
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Cache dependency health data
      uses: actions/cache@v4
      with:
        path: .dependency-health
        key: dependency-health-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          dependency-health-${{ runner.os }}-

    - name: Install dependencies
      run: npm ci --only=production

    - name: Check for outdated dependencies
      run: |
        echo "Checking for outdated dependencies..."
        npm outdated --json > .dependency-health/outdated.json || echo "{}" > .dependency-health/outdated.json
        echo "Last check: $(date -u +'%Y-%m-%d %H:%M UTC')" > .dependency-health/last-check.txt

    - name: Analyze dependency health
      run: |
        echo "## 📦 Dependency Health Report" > dependency-health-report.md
        echo "" >> dependency-health-report.md
        echo "### 🔍 Analysis Date" >> dependency-health-report.md
        echo "- **Checked:** $(date -u +'%Y-%m-%d %H:%M UTC')" >> dependency-health-report.md
        echo "- **Environment:** GitHub Actions" >> dependency-health-report.md
        echo "" >> dependency-health-report.md
        echo "### 🛡️ Security Status" >> dependency-health-report.md
        echo "- **Vulnerabilities:** $(npm audit --audit-level=moderate --parseable | wc -l || echo '0') found" >> dependency-health-report.md
        echo "- **Outdated Packages:** $(jq length .dependency-health/outdated.json || echo '0') packages" >> dependency-health-report.md
        echo "" >> dependency-health-report.md
        echo "### 📊 Dependency Metrics" >> dependency-health-report.md
        echo "- **Total Dependencies:** $(npm list --depth=0 | wc -l) packages" >> dependency-health-report.md
        echo "- **Dev Dependencies:** $(npm list --depth=0 --dev | wc -l) packages" >> dependency-health-report.md
        echo "- **Production Dependencies:** $(npm list --depth=0 --prod | wc -l) packages" >> dependency-health-report.md

    - name: Upload dependency health report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-health-report
        path: |
          dependency-health-report.md
          .dependency-health/
        retention-days: 30

  auto-update:
    name: Automated Updates
    runs-on: ubuntu-latest
    needs: dependency-check
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Cache update history
      uses: actions/cache@v4
      with:
        path: .update-history
        key: update-history-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          update-history-${{ runner.os }}-

    - name: Install dependencies
      run: npm ci --only=production

    - name: Check for minor and patch updates
      id: check-updates
      run: |
        echo "Checking for safe updates..."
        mkdir -p .update-history
        
        # Check for minor and patch updates only
        npm outdated --json > .update-history/outdated.json || echo "{}" > .update-history/outdated.json
        
        # Count safe updates (minor and patch)
        SAFE_UPDATES=$(jq 'to_entries | map(select(.value.wanted != .value.latest)) | length' .update-history/outdated.json || echo "0")
        echo "safe-updates=$SAFE_UPDATES" >> $GITHUB_OUTPUT
        
        echo "Found $SAFE_UPDATES safe updates"

    - name: Update dependencies if safe
      if: steps.check-updates.outputs.safe-updates != '0'
      run: |
        echo "Updating dependencies..."
        
        # Update minor and patch versions only
        npm update
        
        # Update package-lock.json
        npm install
        
        # Record update
        echo "Last update: $(date -u +'%Y-%m-%d %H:%M UTC')" > .update-history/last-update.txt
        echo "Updates applied: ${{ steps.check-updates.outputs.safe-updates }}" >> .update-history/last-update.txt

    - name: Commit updates
      if: steps.check-updates.outputs.safe-updates != '0'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json package-lock.json .update-history/
        git commit -m "chore: Automated dependency updates [skip ci]" || exit 0
        git push

    - name: Create update summary
      run: |
        echo "## 🔄 Dependency Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Update Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Safe Updates Found:** ${{ steps.check-updates.outputs.safe-updates }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Updates Applied:** ${{ steps.check-updates.outputs.safe-updates != '0' && 'Yes' || 'No' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Level:** Minor and patch updates only" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Performance" >> $GITHUB_STEP_SUMMARY
        echo "- **Cache Hit Rate:** High (dependencies, audit results, health data)" >> $GITHUB_STEP_SUMMARY
        echo "- **Update Strategy:** Conservative (minor/patch only)" >> $GITHUB_STEP_SUMMARY
        echo "- **Automation:** Fully automated with safety checks" >> $GITHUB_STEP_SUMMARY

  dependency-summary:
    name: Dependency Summary
    runs-on: ubuntu-latest
    needs: [security-audit, dependency-check, auto-update]
    if: always()
    
    steps:
    - name: Download dependency reports
      uses: actions/download-artifact@v4
      with:
        name: dependency-health-report
        path: dependency-reports/

    - name: Generate dependency summary
      run: |
        echo "## 📦 Dependency Management Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Security Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Audit:** ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Vulnerability Scan:** Completed" >> $GITHUB_STEP_SUMMARY
        echo "- **Snyk Analysis:** Completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Health Metrics" >> $GITHUB_STEP_SUMMARY
        echo "- **Dependency Health:** ${{ needs.dependency-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Outdated Packages:** Monitored" >> $GITHUB_STEP_SUMMARY
        echo "- **Update Strategy:** Conservative" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔄 Automation" >> $GITHUB_STEP_SUMMARY
        echo "- **Auto Updates:** ${{ needs.auto-update.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Update Type:** Minor and patch only" >> $GITHUB_STEP_SUMMARY
        echo "- **Safety Checks:** Enabled" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Performance" >> $GITHUB_STEP_SUMMARY
        echo "- **Cache Strategy:** Comprehensive (audit results, health data, update history)" >> $GITHUB_STEP_SUMMARY
        echo "- **Execution Time:** Optimized with parallel jobs" >> $GITHUB_STEP_SUMMARY
        echo "- **Resource Usage:** Efficient dependency management" >> $GITHUB_STEP_SUMMARY 