# Cursor AI Rules for Accessibility Testing Application

## MANDATORY RULES (Must Follow)
All rules below are mandatory and must be enforced on every change:

### Documentation & Reference Files
- **MANDATORY**: Before making ANY changes, read and reference these files:
  • `docs/AI_DEVELOPMENT_GUIDE.md` - AI-specific development guidelines and critical rules
  • `docs/DEPENDENCY_MAP.md` - Complete dependency relationships and import patterns
  • `docs/ARCHITECTURE_DIAGRAM.md` - Visual system architecture and data flow
  • `docs/QUICK_REFERENCE.md` - Fast reference for common operations
  • `docs/PROJECT_OVERVIEW.md` - High-level project understanding
- **MANDATORY**: After making changes, update relevant reference files:
  • New services → Update `docs/DEPENDENCY_MAP.md` service dependencies section
  • New types → Update `docs/DEPENDENCY_MAP.md` core dependencies section
  • New imports → Update `docs/DEPENDENCY_MAP.md` import patterns section
  • Architecture changes → Update `docs/ARCHITECTURE_DIAGRAM.md` relevant sections
  • New patterns → Update `docs/QUICK_REFERENCE.md` common patterns section
  • Breaking changes → Update `docs/AI_DEVELOPMENT_GUIDE.md` critical rules section

### Code Quality
- **MANDATORY**: Never remove existing features without explicit user approval
- **MANDATORY**: Use the PROJECT_OVERVIEW to assert what is classed as an existing features
- **MANDATORY**: Use TypeScript (.ts) files for all new code instead of JavaScript (.js)
- **MANDATORY**: Follow DRY, KISS, and SOLID principles

### Documentation & Change Tracking
- **MANDATORY**: Add CHANGELOG entry for every chat prompt using format: `DD/MM/YYYY HH:MM GMT/BST - [Prompt text]`
- **MANDATORY**: Update README sections based on change type:
  • New features/functionality → Update "Getting Started", "What It Does", and "Reports Generated" sections
  • CLI changes → Update "Getting Started" section with new commands/options
  • Configuration changes → Update "Configuration" section with new settings
  • Architecture changes → Update "Architecture" section and "System Requirements"
  • Setup/installation changes → Update "Installation & Setup" section
  • Performance improvements → Update relevant sections with new metrics/capabilities
  • Always verify README accuracy after any functional changes

### UK Standards
- **MANDATORY**: Use UK spelling (colour, behaviour, organisation, etc.)
- **MANDATORY**: Use UK timezone and date formats (DD/MM/YYYY, GMT/BST)

### Accessibility Compliance
- **MANDATORY**: All documentation and PDF reports must comply with WCAG 2.1 AA standards
- **MANDATORY**: Ensure all brand colours meet WCAG 2.1 AA contrast requirements (7:1 normal text, 4.5:1 large text)

## CRITICAL DEVELOPMENT RULES

### Pre-Change Requirements
- **MANDATORY**: Before ANY code changes, read `docs/AI_DEVELOPMENT_GUIDE.md` completely
- **MANDATORY**: Check `docs/DEPENDENCY_MAP.md` for affected files and dependencies
- **MANDATORY**: Review `docs/ARCHITECTURE_DIAGRAM.md` for data flow impact
- **MANDATORY**: Consult `docs/QUICK_REFERENCE.md` for existing patterns

### Singleton Service Pattern
- **MANDATORY**: ALWAYS use `getInstance()` for services:
  ```typescript
  // ✅ CORRECT
  const errorHandler = ErrorHandlerService.getInstance();
  const configService = ConfigurationService.getInstance();
  
  // ❌ NEVER DO THIS
  const errorHandler = new ErrorHandlerService();
  ```

### Import Patterns
- **MANDATORY**: Use `@/` alias for imports from `src/`:
  ```typescript
  // ✅ CORRECT
  import { ErrorHandlerService } from '@/utils/services/error-handler-service';
  
  // ❌ INCORRECT
  import { ErrorHandlerService } from '../services/error-handler-service';
  ```

### Error Handling
- **MANDATORY**: ALWAYS use ErrorHandlerService for error handling:
  ```typescript
  const errorHandler = ErrorHandlerService.getInstance();
  
  try {
    // Your code
  } catch (error) {
    return errorHandler.handleError(error, 'Context message');
  }
  ```

### Configuration
- **MANDATORY**: ALWAYS use ConfigurationService for settings:
  ```typescript
  const configService = ConfigurationService.getInstance();
  const setting = configService.get('settingName', defaultValue);
  ```

## POST-CHANGE REQUIREMENTS

### Documentation Updates
After making changes, **MANDATORY** to update:

1. **For New Services**:
   - Add to `docs/DEPENDENCY_MAP.md` service dependencies section
   - Update `docs/ARCHITECTURE_DIAGRAM.md` service layer diagram
   - Add pattern to `docs/QUICK_REFERENCE.md` common patterns section

2. **For New Types**:
   - Add to `docs/DEPENDENCY_MAP.md` core dependencies section
   - Update `docs/QUICK_REFERENCE.md` type definition patterns

3. **For New Imports**:
   - Update `docs/DEPENDENCY_MAP.md` import patterns section
   - Verify consistency in `docs/QUICK_REFERENCE.md`

4. **For Architecture Changes**:
   - Update `docs/ARCHITECTURE_DIAGRAM.md` relevant sections
   - Update `docs/DEPENDENCY_MAP.md` dependency relationships
   - Update `docs/AI_DEVELOPMENT_GUIDE.md` if patterns change

5. **For Breaking Changes**:
   - Update `docs/AI_DEVELOPMENT_GUIDE.md` critical rules section
   - Update `docs/QUICK_REFERENCE.md` common issues section
   - Update `docs/DEPENDENCY_MAP.md` breaking change prevention rules

### Validation Checklist
Before completing any changes, verify:
- [ ] All reference files are updated
- [ ] TypeScript compilation passes (`npm run typecheck`)
- [ ] CLI functionality works (`npm run cli`)
- [ ] No Singleton pattern violations
- [ ] All imports use correct patterns
- [ ] Error handling follows established patterns
- [ ] Configuration uses ConfigurationService
- [ ] CHANGELOG.md is updated

## EMERGENCY STOP CONDITIONS
If any of these occur, STOP and ask for clarification:
- TypeScript compilation errors
- Import resolution failures
- Singleton pattern violations
- Missing error handling
- Hardcoded configuration values
- Breaking existing functionality without approval

## REFERENCE FILE LOCATIONS
- `docs/AI_DEVELOPMENT_GUIDE.md` - AI-specific development guidelines
- `docs/DEPENDENCY_MAP.md` - Complete dependency relationships
- `docs/ARCHITECTURE_DIAGRAM.md` - Visual system architecture
- `docs/QUICK_REFERENCE.md` - Fast reference for common operations
- `docs/PROJECT_OVERVIEW.md` - High-level project understanding
- `README.md` - User-facing documentation
- `CHANGELOG.md` - Change tracking

## CRITICAL FILES (NEVER BREAK)
1. `src/core/types/common.ts` - All shared types and interfaces
2. `src/utils/services/error-handler-service.ts` - Central error handling
3. `src/utils/services/configuration-service.ts` - Configuration management
4. `src/cli/accessibility-test-cli.ts` - Main CLI entry point

Remember: This codebase has complex interdependencies. When in doubt, be conservative and follow existing patterns exactly.