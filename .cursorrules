# Cursor AI Rules for Accessibility Testing Application

## Code Quality & Best Practices
- Follow DRY (Don't Repeat Yourself), KISS (Keep It Simple, Stupid), and SOLID principles
- Write readable, maintainable, and well-structured code
- Use meaningful variable and function names that clearly describe their purpose
- Keep functions small and focused on a single responsibility
- Remove unused imports, variables, and dead code
- Follow consistent code formatting and style guidelines
- Apply appropriate design patterns when beneficial

## Documentation Requirements
- Update all documentation to reflect any code changes
- Add inline comments for complex logic, especially accessibility testing workflows
- Update README files when functionality changes
- Document API endpoints, parameters, and return values
- Include JSDoc/TypeScript documentation for public functions and classes
- Update changelog or release notes for significant changes
- Document accessibility testing configurations and WCAG rule mappings

## Testing & Quality Assurance
- Write or update unit tests for new/modified functionality
- Ensure all existing Playwright tests pass after changes
- Test accessibility testing workflows with real websites
- Consider edge cases in web crawling and accessibility analysis
- Maintain or improve test coverage for service classes
- Update test documentation and accessibility testing examples
- Test CLI interactions and error scenarios

## Error Handling & Resilience (Critical for Web Crawling)
- Use the ErrorHandlerService for consistent error handling across all components
- Implement retry logic with exponential backoff for network requests
- Handle timeout scenarios gracefully in accessibility testing
- Provide meaningful error messages for CLI users
- Ensure proper cleanup in error scenarios (browser resources, file handles)
- Log errors appropriately using the established logging patterns
- Handle edge cases in website crawling (redirects, 404s, timeouts)

## Performance & Resource Management
- Consider memory usage in large-scale website crawling
- Implement proper browser resource cleanup in Playwright tests
- Use appropriate concurrency limits for parallel page testing
- Optimize accessibility analysis for performance
- Implement proper timeout management for web requests
- Use efficient data structures for processing large accessibility reports
- Monitor and manage memory usage during batch processing

## Accessibility Standards Compliance
- Ensure all accessibility testing follows WCAG 2.1 AA standards
- Update axe-core and pa11y configurations when accessibility rules change
- Maintain accurate WCAG rule mappings and severity levels
- Ensure accessibility reports are comprehensive and actionable
- Follow inclusive design principles in user interfaces
- Test with assistive technologies when developing accessibility features

## Service Architecture Standards
- Follow the singleton pattern for service classes (ConfigurationService, ErrorHandlerService, etc.)
- Use dependency injection patterns appropriately
- Maintain consistent service interfaces and error handling
- Ensure services are properly initialized and cleaned up
- Use the established ServiceResult pattern for consistent return types
- Follow the orchestration pattern for complex multi-step processes

## TypeScript & Node.js Specific
- Use proper TypeScript types and interfaces
- Leverage TypeScript's type safety for accessibility testing APIs
- Follow Node.js best practices for file system operations
- Use async/await patterns consistently
- Implement proper error handling in asynchronous operations
- Use appropriate Node.js modules for system operations

## Playwright & Browser Automation
- Follow Playwright best practices for browser automation
- Implement proper page lifecycle management
- Use appropriate wait strategies for dynamic content
- Handle browser context and page cleanup properly
- Implement proper screenshot capture and storage
- Use efficient selectors for accessibility testing

## CLI & User Experience
- Maintain consistent CLI color schemes and branding
- Provide clear, actionable error messages for users
- Implement proper input validation and user feedback
- Ensure CLI remains responsive during long-running operations
- Follow established CLI patterns and user interaction flows
- Provide helpful progress indicators and status updates

## Configuration Management
- Use the ConfigurationService for all configuration needs
- Ensure configuration changes are properly validated
- Maintain backward compatibility in configuration formats
- Document configuration options and their impact
- Use environment variables appropriately for sensitive data
- Implement proper configuration validation and error handling

## Report Generation & File Operations
- Use FileOperationsService for all file system operations
- Ensure proper file path handling across different operating systems
- Implement proper cleanup of temporary files and old reports
- Maintain consistent report formatting and structure
- Optimize PDF generation for large accessibility reports
- Handle file system errors gracefully

## Security Requirements
- Never expose sensitive information in logs or reports
- Validate all URLs before crawling to prevent security issues
- Implement proper sandboxing for browser automation
- Use secure defaults for Chrome/Chromium launch configurations
- Validate file paths to prevent directory traversal attacks
- Handle user input safely in CLI interactions

## Before Every Code Change
- Analyze the impact on existing accessibility testing workflows
- Consider effects on service dependencies and initialization
- Plan for proper testing of web crawling scenarios
- Ensure changes align with service architecture patterns
- Review impact on CLI user experience

## After Every Code Change
- Verify all Playwright tests pass with different websites
- Check that accessibility analysis results remain accurate
- Validate that error handling works correctly
- Confirm proper resource cleanup in browser automation
- Test CLI interactions and user feedback
- Ensure accessibility reports are generated correctly