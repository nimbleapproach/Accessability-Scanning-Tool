# Cursor AI Rules for Accessibility Testing Application

## CRITICAL PRIORITIES (Must Follow)
These rules take absolute precedence and must be enforced on every change:

### Code Quality Enforcement
- **MANDATORY**: Run ESLint and Prettier before finalizing any code changes
- **MANDATORY**: Ensure all linting errors are resolved and code is properly formatted
- **MANDATORY**: Never remove existing features without explicit user approval
- **MANDATORY**: Use TypeScript (.ts) files for all new code instead of JavaScript (.js)

### Documentation & Versioning
- **MANDATORY**: Add changelog entry for every change following semantic versioning
- **MANDATORY**: Update version numbers (MAJOR.MINOR.PATCH) based on change type

### UK Localisation Standards
- **MANDATORY**: Use UK spelling (colour, behaviour, organisation, etc.)
- **MANDATORY**: Use UK timezone and date formats (DD/MM/YYYY, GMT/BST)

### Accessibility Compliance
- **CRITICAL**: All documentation and PDF reports must comply with WCAG 2.1 AAA standards
- **CRITICAL**: Ensure all brand colours meet WCAG 2.1 AAA contrast requirements (7:1 normal text, 4.5:1 large text)

## HIGH PRIORITY (Should Follow)
Important rules that should be followed but may have exceptions:

### TypeScript & Type Safety
- Provide proper TypeScript types for all functions, parameters, and return values
- Use TypeScript interfaces and types to define data structures clearly
- Leverage TypeScript's type safety features to prevent runtime errors
- Add proper type annotations for better code documentation and IDE support

### Testing & Quality Assurance
- **MANDATORY**: Review and update unit tests after every change for comprehensive coverage
- Write or update unit tests for new/modified functionality
- Ensure all existing Playwright tests pass after changes
- Test accessibility testing workflows with real websites

### Error Handling & Resilience
- Use the ErrorHandlerService for consistent error handling across all components
- Implement retry logic with exponential backoff for network requests
- Handle timeout scenarios gracefully in accessibility testing
- Provide meaningful error messages for CLI users

## MEDIUM PRIORITY (Follow When Possible)
Best practices that should be implemented when practical:

### Code Structure & Architecture
- Follow DRY, KISS, and SOLID principles
- Write readable, maintainable, and well-structured code
- Use meaningful variable and function names
- Keep functions small and focused on a single responsibility
- Remove unused imports, variables, and dead code

### Service Architecture Standards
- Follow the singleton pattern for service classes
- Use dependency injection patterns appropriately
- Maintain consistent service interfaces and error handling
- Use the established ServiceResult pattern for consistent return types

### Performance & Resource Management
- Consider memory usage in large-scale website crawling
- Implement proper browser resource cleanup in Playwright tests
- Use appropriate concurrency limits for parallel page testing
- Optimize accessibility analysis for performance

## BRAND GUIDELINES (Visual Identity)
Brand consistency requirements:

### Colour Standards
- Primary brand colours: Purple/Blue (#1e214d), Magenta (#db0064), Yellow (#fcc700)
- Secondary colours: Dark Purple (#1b1532), Orange (#ff8a00), Light Blue (#ebf7fc)
- Supporting colours: Green (#22b094), Blue (#00bcff)
- **CRITICAL**: All brand colours must maintain WCAG 2.1 AAA contrast ratios

### Typography
- Use Poppins Bold for main titles and headers
- Use Red Hat Display for smaller titles and body copy
- Apply brand typography consistently across documentation and reports

### Brand Application
- Maintain consistent CLI colour schemes using brand colours
- Apply brand colours to PDF reports with AAA accessibility compliance
- Use supporting colours for status indicators with semantic meaning

## CONFIGURATION & DEPENDENCIES
Essential configuration requirements:

### Tool Configuration
- Use ConfigurationService for all configuration needs
- Ensure configuration changes are properly validated
- Use environment variables appropriately for sensitive data

### File Operations
- Use FileOperationsService for all file system operations
- Ensure proper file path handling across different operating systems
- Implement proper cleanup of temporary files and old reports

### Security Requirements
- Never expose sensitive information in logs or reports
- Validate all URLs before crawling to prevent security issues
- Implement proper sandboxing for browser automation
- Use secure defaults for Chrome/Chromium launch configurations

## AUTOMATED ENFORCEMENT
Scripts and tools to enforce rules:

### Required Scripts
- `npm run lint:fix` - Fix ESLint issues
- `npm run format` - Apply Prettier formatting
- `npm run typecheck` - Check TypeScript types
- `npm run code:fix` - Run all code quality checks and fixes

### Git Hooks
- Pre-commit hook runs linting and formatting
- Changelog validation on commits
- Version bump validation

## IMPLEMENTATION CHECKLIST
Before every code change:
- [ ] Analyze impact on existing accessibility testing workflows
- [ ] Consider effects on service dependencies and initialisation
- [ ] Plan for proper testing of web crawling scenarios
- [ ] Ensure changes align with service architecture patterns
- [ ] Verify brand colour usage maintains WCAG 2.1 AAA compliance

After every code change:
- [ ] Run `npm run code:fix` to ensure all linting/formatting is resolved
- [ ] Verify all Playwright tests pass with different websites
- [ ] Check that accessibility analysis results remain accurate
- [ ] Validate that error handling works correctly
- [ ] Confirm proper resource cleanup in browser automation
- [ ] Test CLI interactions and user feedback with brand colours
- [ ] Ensure accessibility reports are generated correctly with brand guidelines
- [ ] Update changelog with appropriate semantic versioning
- [ ] Review and update unit tests for comprehensive coverage

## RULE COMPLIANCE MONITORING
To ensure rules are followed:

1. **Automated Enforcement:**
   - Pre-commit hooks automatically run linting and formatting
   - IDE integration shows linting errors in real-time
   - Git hooks prevent commits with linting errors
   - Regular automated code quality checks

2. **Quality Standards:**
   - All code must pass TypeScript compilation
   - ESLint and Prettier must show zero errors
   - All new code requires proper TypeScript types
   - Unused imports and variables must be removed

3. **Documentation Standards:**
   - All generated content must meet AAA accessibility standards
   - Service interfaces must be properly documented
   - Changelog must be maintained with semantic versioning
   - README must reflect current setup instructions

The rules are comprehensive and are enforced through automated tooling and development processes.